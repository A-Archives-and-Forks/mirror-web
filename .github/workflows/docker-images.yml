name: docker-images

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  multi:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    steps:
      -
        name: Determine docker tag
        id: docker_tag
        env:
          TAG_NAME: ${{ github.ref }}
        run: |
          case "${TAG_NAME}" in
            refs/heads/master)
              tag=latest
              ;;
            refs/tags/*)
              tag=${TAG_NAME#refs/tags/}
              ;;
            refs/heads/*)
              tag=branch-${TAG_NAME#refs/heads/}
              ;;
            *)
              tag="dummy"
              ;;
          esac
          echo "docker_tag=${tag}" | tee -a $GITHUB_OUTPUT
      -
        name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
      -
        name: Prevent from loading rubygems from TUNA
        run: |
          sed -i "/^source/c source 'https://rubygems.org'" Gemfile
          sed -i '/remote:/s@remote: .*$@remote: https://rubygems.org@' Gemfile.lock
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Cache Docker layers
        uses: actions/cache@v4
        if: github.event_name == 'push'
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-buildx-${{ matrix.os }}-
            ${{ matrix.os }}-buildx-
      -
        name: Cache Docker layers
        uses: actions/cache@v4
        if: github.event_name == 'pull_request'
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.os }}-pr-${{ github.event.pull_request.head.user.login }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-pr-${{ github.event.pull_request.head.user.login }}-buildx-
            ${{ matrix.os }}-buildx-
            ${{ matrix.os }}-buildx-
      -
        name: Cache Docker layers
        if: github.event_name != 'push' && github.event_name != 'pull_request'
        run: |
          echo "I do not know how to setup cache"
          exit -1
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        if: github.event_name == 'push'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build Test Docker Image
        uses: docker/build-push-action@v6
        id: docker_build
        with:
          context: .
          file: Dockerfile.build
          push: false
          tags: tunathu/mirror-web:localtest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/local-test-build-cache
          load: true
      -
        name: Test Run Page Build
        run: |
          docker run --rm \
            -v $PWD:/data \
            -v $PWD/_site:/data/_site \
            --tmpfs /data/.jekyll-cache \
            --tmpfs /data/node_modules:exec \
            --env VISUALIZER=1 \
            tunathu/mirror-web:localtest \
            bash -c "npm install rollup-plugin-visualizer && bundle exec jekyll build --future"
      -
        name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: _site
      -
        name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stats.html
          path: _stats.html
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.build
          push: ${{ github.event_name == 'push' }}
          tags: tunathu/mirror-web:${{ steps.docker_tag.outputs.docker_tag }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=local,src=/tmp/local-test-build-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          outputs: ${{ github.event_name == 'push' && 'type=image,push-by-digest=true,name-canonical=true,push=true' || 'type=image' }}
      -
        name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests/
          digest="${{ steps.docker_build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ runner.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - multi
    if: always() && github.event_name == 'push'
    steps:
      -
        name: Determine docker tag
        id: docker_tag
        env:
          TAG_NAME: ${{ github.ref }}
        run: |
          case "${TAG_NAME}" in
            refs/heads/master)
              tag=latest
              ;;
            refs/tags/*)
              tag=${TAG_NAME#refs/tags/}
              ;;
            refs/heads/*)
              tag=branch-${TAG_NAME#refs/heads/}
              ;;
            *)
              tag="dummy"
              ;;
          esac
          echo "docker_tag=${tag}" | tee -a $GITHUB_OUTPUT
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create -t "tunathu/mirror-web:${{ steps.docker_tag.outputs.docker_tag }}" \
            $(printf "tunathu/mirror-web@sha256:%s " $(ls .))

      - name: Inspect images
        working-directory: ${{ runner.temp }}/digests
        run: |
          DOCKER_IMG="tunathu/mirror-web:${{ steps.docker_tag.outputs.docker_tag }}"
          echo "## $DOCKER_IMG" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          docker buildx imagetools inspect "$DOCKER_IMG" | tee -a $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
